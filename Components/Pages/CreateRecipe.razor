@page "/create-recipe"
@rendermode InteractiveServer
@inject RecipeDbContext context
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Create Recipe</PageTitle>

<style>
    .page {
        background: linear-gradient(-45deg, #ff0, #e0a);
        min-height: 100vh;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        justify-content: center;
        margin: auto;
        padding: 2rem;
        width: 50%;
    }

    .validation-message {
        color: #ffa;
    }

    button {
        display: flex;
        justify-content: center;
        width: 100px;
    }

    label {
        font-size: larger;
        text-decoration: underline;
    }
</style>

<script>
    window.registerUnloadEvent = function () {
        window.onbeforeunload = function () {
            DotNet.invokeMethodAsync(
                "RecipeRepository",
                "DisposeImage",
                document.getElementById("image").value
            );
        };
    };
</script>

<h1 class="text-center">Create-a-Recipe</h1>

@if (Recipe is null)
{
    <h1>Loading...</h1>
}
else
{
    <EditForm Model="Recipe" OnValidSubmit="Submit" FormName="RecipeCreator" class="form">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (Recipe.IsUploadInProgress)
        {
            <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
        }
        @if (TooLarge)
        {
            <p class="validation-message">File is too large. Max size is 2MB.</p>
        }

        <label for="image">Image</label>
        <InputFile id="image" OnChange="DownloadImage" accept="image/*" class="@GetImageInputClasses()" />

        <label for="name">Name</label>
        <InputText class="form-control" id="name" @bind-Value="Recipe.Name" />

        <label for="description">Description</label>
        <InputText class="form-control" id="description" @bind-Value="Recipe.Description" />

        <label for="ingredients">Ingredients</label>
        @if (Recipe.Ingredients.Count > 0)
        {
            <div class="d-flex justify-content-center">
                <ul>
                    @foreach (var (ingredient, index) in Recipe.Ingredients.Select((ingredient, index) => (ingredient, index)))
                    {
                        <li class="input-group">
                            <div>
                                <label for="i-quantity">Quantity</label>
                                <InputNumber class="form-control i-quantity" id="i-quantity" @bind-Value="ingredient.Quantity" />
                            </div>
                            <div>
                                <label for="i-unit">Unit</label>
                                <InputSelect class="form-control i-unit" id="i-unit" @bind-Value="ingredient.Unit">
                                    @foreach (var unit in Enum.GetValues<IngredientUnit>())
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                            </div>
                            <div>
                                <label for="i-name">Name</label>
                                <InputText class="form-control i-name" id="i-name" @bind-Value="ingredient.Name" />
                            </div>
                            <button class="align-self-end btn btn-danger h-50" type="button"
                                @onclick="@(()=>Recipe.Ingredients.RemoveAt(index))">Remove</button>
                        </li>
                    }
                </ul>
            </div>
        }
        <div class="d-flex justify-content-center">
            <button class="btn btn-info mx-5" type="button"
                @onclick="@(()=>Recipe.Ingredients.Add(new Ingredient()))">+</button>
        </div>

        <label for="instructions">Instructions</label>
        @if (Recipe.Instructions.Count > 0)
        {
            <div class="d-flex justify-content-center">
                <ol>
                    @foreach (var index in Enumerable.Range(0, Recipe.Instructions.Count))
                    {
                        <li class="align-items-center d-flex gap-2 input-group">
                            <label for="i-instruction">Step @(index + 1):</label>
                            <InputText class="form-control list-group-item" @bind-Value="Recipe.Instructions[index]" />
                            <button class="btn btn-danger" type="button"
                                @onclick="@(()=>Recipe.Instructions.RemoveAt(index))">Remove</button>
                        </li>
                    }
                </ol>
            </div>
        }
        <div class="d-flex justify-content-center">
            <button class="btn btn-info mx-5" type="button" @onclick="@(()=>Recipe.Instructions.Add(""))">+</button>
        </div>

        <button class="align-self-end btn btn-primary me-5 mt-5" type="submit">Submit</button>
    </EditForm>
}

@code {
    [JSInvokable]
    public static async Task DisposeImage(string imagePath)
    {
        await Task.Run(() =>
        {
            if (imagePath is not null)
            {
                var context = new RecipeDbContext();
                var filename = imagePath.Replace("C:\\fakepath\\", "");
                var dbEntry = context.RecipeImages.FirstOrDefault(i => i.OriginalName == filename);
                if (dbEntry is not null)
                {
                    context.RecipeImages.Remove(dbEntry);
                    context.SaveChanges();
                    var imageFile = $"wwwroot/{dbEntry.Path}";
                    File.Delete(imageFile);
                }
            }
        });
    }

    [SupplyParameterFromForm] Recipe Recipe { get; set; } = new();

    public bool IsUploadInProgress { get; set; }
    decimal progressPercent;
    bool TooLarge = false;
    int maxFileSize = 1024 * 1024 * 2;
    string GetImageInputClasses()
    => Recipe.Image?.Path is null ? "border border-success form-control" : "form-control";
    async Task DownloadImage(InputFileChangeEventArgs e)
    {
        DeleteImage();

        progressPercent = 0;
        Recipe.IsUploadInProgress = true;

        string path = $@"/images/{Path.GetRandomFileName()}{Path.GetExtension(e.File.Name)}";

        IBrowserFile file = e.File;

        if (file.Size > maxFileSize)
        {
            Recipe.IsUploadInProgress = false;
            TooLarge = true;
            return;
        }
        else TooLarge = false;

        await using FileStream writeStream = new($"wwwroot/{path}", FileMode.Create);
        await using Stream readStream = file.OpenReadStream(maxFileSize);

        var bytesRead = 0;
        var totalRead = 0;
        var buffer = new byte[1024 * 10];
        while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
        {
            totalRead += bytesRead;
            await writeStream.WriteAsync(buffer, 0, bytesRead);
            progressPercent = Decimal.Divide(totalRead, file.Size);
            StateHasChanged();
        }

        Recipe.Image.OriginalName = file.Name;
        Recipe.IsUploadInProgress = false;
        Recipe.Image.Path = path;

        context.Add(new RecipeImage { OriginalName = file.Name, Path = path });
        context.SaveChanges();
    }
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
        => DeleteImage();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerUnloadEvent");
        }
    }
    void Submit()
    {
        if (Recipe is not null)
        {
            context.Recipes.Add(Recipe);
            context.SaveChanges();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }
    void DeleteImage()
    {
        if (Recipe.Image.Path is not null)
        {
            File.Delete(Recipe.Image.Path);
            Recipe.Image.Path = null;
        }
    }
}

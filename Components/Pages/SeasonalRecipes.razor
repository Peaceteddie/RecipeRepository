@page "/seasonal-recipes/{season?}"
@using Microsoft.EntityFrameworkCore;

@if (Season != null)
{
    <h3>Seasonal Recipes@($" for {Season}")</h3>
}
else
{
    <h3>Seasonal Recipes</h3>
}

@if (Recipes.Any())
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Matching Ingredient(s)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Recipes)
            {
                var matchingIngredients = recipe.Ingredients
                .Where(i => i.Name != null && seasonals.Any(s => s.Name == i.Name))
                .ToList();

                <tr>
                    <td>@recipe.Name</td>
                    <td>
                        <ul>
                            @foreach (var ingredient in matchingIngredients)
                            {
                                <li>@ingredient.Name</li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No seasonal recipes found.</p>
}

@code {
    [Parameter] public string? season { get; set; }
    Season? Season => Enum.TryParse<Season>(season, true, out var result) ? result : null;
    List<Recipe> Recipes { get; set; } = new();
    List<SeasonalIngredient> seasonals = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = new RecipeDbContext();
        var allRecipes = await context.GetRecipesWithIngredients();
        seasonals = await context.SeasonalIngredients.ToListAsync();
        Recipes = allRecipes
        .Where(recipe => recipe.Ingredients
        .Any(ingredient => ingredient.Name != null && seasonals
        .Any(s => s.Name == ingredient.Name) && seasonals
        .First(s => s.Name == ingredient.Name).Season == Season))
        .ToList();
    }
}
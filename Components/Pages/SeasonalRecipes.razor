@page "/seasonal-recipes/{season}"
@using Microsoft.EntityFrameworkCore;

@if (season is not null)
{
    <h1>@Season.ToString() Recipes</h1>
}
@if (Recipes.Any(r => r.Ingredients.Any(i => Seasonals.Any(si => si.Name == i.Name))))
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Matching Ingredient(s)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Recipes)
            {
                <tr>
                    <td>
                        <a href="/recipes/@recipe.Id.ToString()">
                            @recipe.Name
                        </a>
                    </td>
                    <td>
                        <ul class="d-flex flex-row">
                            @foreach (var ingredient in recipe.Ingredients.Where(i => Seasonals.Any(si => si.Name == i.Name)))
                            {
                                <li class="d-flex flex-row">
                                    @ingredient.Name
                                </li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No seasonal recipes found.</p>
}
@code {
    [Parameter] public string? season { get; set; }
    Season? Season => Enum.TryParse<Season>(season, true, out var result) ? result : null;
    List<Recipe> Recipes { get; set; } = new();
    List<SeasonalIngredient> Seasonals = new();
    protected override async Task OnInitializedAsync()
    {
        if (season is not null)
        {
            using var dbContext = new RecipeDbContext();

            Seasonals = await dbContext.SeasonalIngredients
            .Where(si => si.Season == Season)
            .ToListAsync();

            Recipes = await dbContext.Recipes
            .Include(r => r.Ingredients)
            .ToListAsync();

            Recipes = Recipes
            .Where(r => r.Ingredients.Any(i => Seasonals.Any(si => si.Name == i.Name)))
            .ToList();
        }
    }
}

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th,
    td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:nth-child(even) {
        background-color: #eee;

        &:hover {
            background-color: #efe;
        }
    }

    tr {
        background-color: #fff;

        &:hover {
            background-color: #efe;
        }
    }

    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        display: inline;
    }

    li::before {
        content: "ðŸ”¹";
    }
</style>
@using Microsoft.EntityFrameworkCore;
@rendermode InteractiveServer
<div class="recipe-container">
    <div class="recipe-container-inner">
        <div class="recipe-inner-inner">
            @if (filteredRecipes is not null || recipes is not null)
            {
                foreach (var recipe in filteredRecipes ?? recipes ?? [])
                {
                            <RecipeCard Recipe="@recipe" CardClicked="@(() => ShowDetails(recipe))" />
                }
            }
            else
            {
                    <p>Loading...</p>
            }
        </div>
    </div>
</div>
@code
{
#pragma warning disable BL0007
    [Parameter]
    public string? searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            UpdateFiltered();
        }
    }
#pragma warning restore BL0007
    [Parameter] public EventCallback<Recipe> OnClickCallback { get; set; }
    string? _searchTerm;
    List<Recipe>? filteredRecipes { get; set; }
    List<Recipe>? recipes { get; set; }
    protected override void OnInitialized()
    {
        using RecipeDbContext context = new();
        recipes = context.Recipes
        .Include(r => r.Ingredients)
        .Include(r => r.Image)
        .Include(r => r.Tags)
        .OrderByDescending(r => r.Favorited)
        .ThenBy(r => r.Name)
        .ToList();
    }
    void UpdateFiltered()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRecipes = recipes;
            return;
        }
        filteredRecipes = recipes?
        .Where(r => r.Name != null && r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    }
    void ShowDetails(Recipe recipe)
    => OnClickCallback.InvokeAsync(recipe);

    void OnFavorite()
    {
        if (recipes is not null)
        {
            recipes = recipes
            .OrderByDescending(r => r.Favorited)
            .ThenBy(r => r.Name)
            .ToList();
            StateHasChanged();
        }
    }
}

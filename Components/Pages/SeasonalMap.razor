@page "/seasonalmap"
@using Microsoft.EntityFrameworkCore;

<h3>Seasonal Map</h3>

<div class="seasonal-map">
    @if (seasonalIngredients != null)
    {
        @foreach (var season in seasonalIngredients.GroupBy(x => x.Season))
        {
            <section class="@((season.Key == currentSeason  ? "active-" : "")+season.Key.ToString().ToLower())">
                <NavLink href="@($"/seasonal-recipes/{season.Key.ToString().ToLower()}")">
                    <h4>@season.Key</h4>
                </NavLink>
                <div class="seasonal-ingredients">
                    @foreach (var ingredient in season)
                    {
                        <img src="@ingredient.Image" alt="@ingredient.Name" data-bs-toggle="tooltip" title="@ingredient.Name" />
                    }
                </div>
            </section>
        }
    }
</div>

<script>
    window.addEventListener('DOMContentLoaded', () => {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>

<style>
    h4 {
        color: hsl(0, 0%, 30%);
        padding: .5rem;
    }

    .seasonal-map {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
    }

    .seasonal-map img {
        width: 100%;
        height: auto;
    }

    .seasonal-ingredients {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 1rem;
    }

    .active-spring {
        background-color: hsl(120, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;

        h4 {
            background-color: hsl(300, 100%, 85%);
            border-radius: 2rem;
            box-shadow: 0 5px 8px hsl(120, 100%, 70%);
            color: yellow;
            padding-inline: 1rem;
        }
    }

    .active-summer {
        background-color: hsl(60, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;

        h4 {
            background-color: hsl(240, 100%, 85%);
            border-radius: 2rem;
            box-shadow: 0 5px 8px hsl(60, 100%, 70%);
            color: aqua;
            padding-inline: 1rem;
        }
    }

    .active-autumn {
        background-color: hsl(30, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;

        h4 {
            background-color: hsl(150, 100%, 85%);
            border-radius: 2rem;
            box-shadow: 0 5px 8px hsl(30, 100%, 70%);
            color: orange;
            padding-inline: 1rem;
        }
    }

    .active-winter {
        background-color: hsl(200, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;

        h4 {
            background-color: hsl(0, 100%, 85%);
            border-radius: 2rem;
            box-shadow: 0 5px 8px hsl(200, 100%, 70%);
            color: lime;
            padding-inline: 1rem;
        }
    }

    .spring {
        background-color: hsl(120, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;
    }

    .summer {
        background-color: hsl(60, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;
    }

    .autumn {
        background-color: hsl(30, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;
    }

    .winter {
        background-color: hsl(200, 100%, 90%);
        border-radius: 2rem;
        padding: 2rem;
    }
</style>

@code {
    List<SeasonalIngredient>? seasonalIngredients { get; set; }

    Season currentSeason = DateTime.Now.Month switch
    {
        12 or 1 or 2 => Season.Winter,
        3 or 4 or 5 => Season.Spring,
        6 or 7 or 8 => Season.Summer,
        9 or 10 or 11 => Season.Autumn,
        _ => Season.Spring
    };

    protected override async Task OnInitializedAsync()
    {
        var dbContext = new RecipeDbContext();
        seasonalIngredients = await dbContext.SeasonalIngredients.ToListAsync();
    }
}
